generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id       String  @id @default(cuid())
  parentId String?
  name     String

  // Self-referential relationship for hierarchical tenants
  parent   Tenant?  @relation("TenantHierarchy", fields: [parentId], references: [id])
  children Tenant[] @relation("TenantHierarchy")

  // Relations to other models
  resourceOwnerships ResourceOwnership[]
  access             TenantAccess[]

  @@map("tenants")
}

model Resource {
  id   String @default(cuid())
  type String

  // Relations
  ownership ResourceOwnership[]
  access    ResourceAccess[]

  @@unique([id, type])
  @@map("resources")
}

model ResourceOwnership {
  resourceId   String
  resourceType String
  tenantId     String

  // Relations
  resource Resource @relation(fields: [resourceId, resourceType], references: [id, type], onDelete: Cascade)
  tenant   Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([resourceId, resourceType])
  @@map("resource_ownerships")
}

model ResourceAccess {
  roleId       String
  accountId    String
  resourceId   String
  resourceType String

  // Relations
  account  Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  role     Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  resource Resource @relation(fields: [resourceId, resourceType], references: [id, type], onDelete: Cascade)

  @@unique([accountId, resourceId, resourceType])
  @@map("resource_access")
}

model TenantAccess {
  roleId    String
  accountId String
  tenantId  String

  // Relations
  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  role    Role    @relation(fields: [roleId], references: [id], onDelete: Cascade)
  tenant  Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([accountId, tenantId])
  @@map("tenant_access")
}

model Account {
  id           String  @id @default(cuid())
  name         String?
  email        String? @unique
  organization String?

  // Relations
  resourceAccess ResourceAccess[]
  TenantAccess   TenantAccess[]

  @@map("accounts")
}

model Role {
  id          String  @id @default(cuid())
  name        String?
  description String?

  // Relations
  resourceAccess ResourceAccess[]
  permissions    RolePermission[]
  TenantAccess   TenantAccess[]

  @@map("roles")
}

model Permission {
  name String @unique

  // Relations
  roles RolePermission[]

  @@map("permissions")
}

model RolePermission {
  roleId         String
  permissionName String

  // Relations
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionName], references: [name], onDelete: Cascade)

  @@unique([roleId, permissionName])
  @@map("role_permissions")
}
